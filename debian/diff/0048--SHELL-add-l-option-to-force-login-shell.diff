From 78346e54a9d957c3f5c5bbd360d17233add45600 Mon Sep 17 00:00:00 2001
From: Gerrit Pape <pape@smarden.org>
Date: Mon, 9 Jun 2008 15:14:24 +0000
Subject: [PATCH] [SHELL] add -l option to force login shell

This commit adds the -l option to dash, forcing the behavior of a login
shell, to be compliant with the LSB 3.1.0.

The change was suggested by Raphael Geissert through
 http://bugs.debian.org/483287

Signed-off-by: Gerrit Pape <pape@smarden.org>
---
 src/dash.1    |   13 +++++++++----
 src/main.c    |    8 ++++++--
 src/options.c |    2 ++
 src/options.h |    5 +++--
 4 files changed, 20 insertions(+), 8 deletions(-)

diff --git a/src/dash.1 b/src/dash.1
index df7c749..d404167 100644
--- a/src/dash.1
+++ b/src/dash.1
@@ -127,7 +127,10 @@ An interactive shell generally prompts before each command and handles
 programming and command errors differently (as described below).
 When first starting,
 the shell inspects argument 0, and if it begins with a dash
-.Sq - ,
+.Sq -
+(or if the
+.Fl l
+flag is set),
 the shell is also considered
 a login shell.
 This is normally done automatically by the system
@@ -136,18 +139,18 @@ A login shell first reads commands
 from the files
 .Pa /etc/profile
 and
-.Pa .profile
+.Pa ~/.profile
 if they exist.
 If the environment variable
 .Ev ENV
 is set on entry to an interactive shell, or is set in the
-.Pa .profile
+.Pa ~/.profile
 of a login shell, the shell next reads
 commands from the file named in
 .Ev ENV .
 Therefore, a user should place commands that are to be executed only at
 login time in the
-.Pa .profile
+.Pa ~/.profile
 file, and commands that are executed for every interactive shell inside the
 .Ev ENV
 file.
@@ -235,6 +238,8 @@ Useful for debugging.
 Ignore EOF's from input when interactive.
 .It Fl i Em interactive
 Force the shell to behave interactively.
+.It Fl l Em login
+Force the shell to behave as a login shell.
 .It Fl m Em monitor
 Turn on job control (set automatically when interactive).
 .It Fl s Em stdin
diff --git a/src/main.c b/src/main.c
index b421e4f..32a1ea6 100644
--- a/src/main.c
+++ b/src/main.c
@@ -149,12 +149,16 @@ main(int argc, char **argv)
 	init();
 	setstackmark(&smark);
 	procargs(argc, argv);
-	if (argv[0] && argv[0][0] == '-') {
+	if ((argv[0] && argv[0][0] == '-') || lflag) {
 		state = 1;
 		read_profile("/etc/profile");
 state1:
 		state = 2;
-		read_profile(".profile");
+		STARTSTACKSTR(shinit);
+		shinit = stputs(lookupvar(homestr) ?: ".", shinit);
+		shinit = stputs("/.profile", shinit);
+		STACKSTRNUL(shinit);
+		read_profile(stackblock());
 	}
 state2:
 	state = 3;
diff --git a/src/options.c b/src/options.c
index 48c9671..812bbc6 100644
--- a/src/options.c
+++ b/src/options.c
@@ -79,6 +79,7 @@ static const char *const optnames[NOPTS] = {
 	"allexport",
 	"notify",
 	"nounset",
+	"login",
 	"nolog",
 	"debug",
 };
@@ -99,6 +100,7 @@ const char optletters[NOPTS] = {
 	'a',
 	'b',
 	'u',
+	'l',
 	0,
 	0,
 };
diff --git a/src/options.h b/src/options.h
index 45bbe5a..432ccff 100644
--- a/src/options.h
+++ b/src/options.h
@@ -59,8 +59,9 @@ struct shparam {
 #define	aflag optlist[12]
 #define	bflag optlist[13]
 #define	uflag optlist[14]
-#define	nolog optlist[15]
-#define	debug optlist[16]
+#define	lflag optlist[15]
+#define	nolog optlist[16]
+#define	debug optlist[17]
 
 #define NOPTS	17
 
-- 
1.5.6

